/*
 * Copyright (c) 2014 xxyy (Philipp Nowak; devnull@nowak-at.net). All rights reserved.
 *
 * Any usage, including, but not limited to, compiling, running, redistributing, printing, copying and reverse-engineering is strictly prohibited without permission from the original author and may result in legal steps being taken.
 */

package io.github.xxyy.common.util;

import java.lang.management.ManagementFactory;
import java.lang.management.MonitorInfo;
import java.lang.management.ThreadInfo;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Helps dealing with a multithreading environment.
 *
 * @author <a href="http://xxyy.github.io/">xxyy</a>
 * @since 14.4.14
 */
public final class ThreadHelper {
    private ThreadHelper() {
    }

    public static void printThreadDump(Logger logger) {
        for (ThreadInfo thread : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {
            dumpThread(thread, logger);
        }

        logger.log(Level.INFO, "Thread dump generated by xy_common - Probably no need to worry.");
    }

    private static void dumpThread(ThreadInfo threadInfo, Logger logger) {
        logger.log(Level.WARNING, "------------------------------");
        //
        logger.log(Level.WARNING, " Thread: " + threadInfo.getThreadName());
        logger.log(Level.WARNING, "\tPID: " + threadInfo.getThreadId()
                + " | Suspended? " + threadInfo.isSuspended()
                + " | State: " + threadInfo.getThreadState());
        if (threadInfo.getLockedMonitors().length != 0) {
            logger.log(Level.WARNING, "\tThread is waiting on monitor(s):");
            for (MonitorInfo monitor : threadInfo.getLockedMonitors()) {
                logger.log(Level.WARNING, "\t\tLocked on:" + monitor.getLockedStackFrame());
            }
        }
        logger.log(Level.WARNING, "\tStack:");
        //
        for (StackTraceElement stack : threadInfo.getStackTrace()) {
            logger.log(Level.WARNING, "\t\t" + stack);
        }
    }
}
