/*
 * MIT License
 *
 * Copyright (C) 2013 - 2017 Philipp Nowak (https://github.com/xxyy) and contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package li.l1t.common.util;

import java.lang.management.ManagementFactory;
import java.lang.management.MonitorInfo;
import java.lang.management.ThreadInfo;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Helps dealing with a multithreading environment.
 *
 * @author <a href="http://xxyy.github.io/">xxyy</a>
 * @since 14.4.14
 */
public final class ThreadHelper {
    private ThreadHelper() {
    }

    public static void printThreadDump(Logger logger) {
        for (ThreadInfo thread : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {
            dumpThread(thread, logger);
        }

        logger.log(Level.INFO, "Thread dump generated by xy_common - Probably no need to worry.");
    }

    private static void dumpThread(ThreadInfo threadInfo, Logger logger) {
        logger.log(Level.WARNING, "------------------------------");
        //
        logger.log(Level.WARNING, " Thread: " + threadInfo.getThreadName());
        logger.log(Level.WARNING, "\tPID: " + threadInfo.getThreadId()
                + " | Suspended? " + threadInfo.isSuspended()
                + " | State: " + threadInfo.getThreadState());
        if (threadInfo.getLockedMonitors().length != 0) {
            logger.log(Level.WARNING, "\tThread is waiting on monitor(s):");
            for (MonitorInfo monitor : threadInfo.getLockedMonitors()) {
                logger.log(Level.WARNING, "\t\tLocked on:" + monitor.getLockedStackFrame());
            }
        }
        logger.log(Level.WARNING, "\tStack:");
        //
        for (StackTraceElement stack : threadInfo.getStackTrace()) {
            logger.log(Level.WARNING, "\t\t" + stack);
        }
    }
}
